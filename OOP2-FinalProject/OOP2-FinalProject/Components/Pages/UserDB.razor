@page "/userDB/{id:int?}"
@using OOP2_FinalProject.Data
@inject NavigationManager navigation
@inject Data.LibraryService LibraryDatabase

<h1>Users</h1>

<h3>@(Id.HasValue? "Edit User":"Add User")</h3>

@if (!string.IsNullOrEmpty(UserErrorMessage))
{
    <div>@UserErrorMessage</div>
}

<EditForm Model="@user" OnValidSubmit="SaveUser">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>
    <label for="LibraryNum">Library Card Number</label>
    <InputNumber id="LibraryNum" TValue="int" @bind-Value="@user.LibNum"></InputNumber>
    <label for="FirstName">First Name</label>
    <InputText id="FirstName" @bind-Value="@user.FName"></InputText>
    <label for="LastName">Last Name</label>
    <InputText id="LastName" @bind-Value="@user.LName"></InputText>
    <label for="Email">Email</label>
    <InputText id="Email" @bind-Value="@user.Email"></InputText>
    <button type="submit">Submit</button>
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }
    private string UserErrorMessage;
    private User user = new User();

    private async Task SaveUser()
    {
        try
        {
            await LibraryDatabase.SaveUserAsync(user);
            navigation.NavigateTo("/Users");
        }
        catch (Exception e)
        {
            UserErrorMessage = e.Message;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (Id.HasValue)
            {
                user = await LibraryDatabase.GetUserAsync(Id.Value);
            }
        }
        catch (Exception e)
        {
            UserErrorMessage = e.Message;
        }
    }
}
