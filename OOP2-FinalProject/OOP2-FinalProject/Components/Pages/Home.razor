@page "/"
@inject Data.LibraryService LibraryDatabase
@* @inject Data.UserService UserDatabase*@
@using OOP2_FinalProject.Data

<h1>Library Management System</h1>
<div>
<h3>Books</h3>

@if(!string.IsNullOrEmpty(BookErrorMessage))
{
        <p>@BookErrorMessage</p>
}

<a href="/BookDB">Add New Book</a>

<table>
    <thead>
        <tr>
            <th>ISBN</th>
            <th>Title</th>
            <th>Author</th>
            <th>Genre</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @if (books != null)
        {
            foreach (var book in books)
            {
                <tr>
                    <td>@book.Isbn</td>
                    <td>@book.Title</td>
                    <td>@book.Author</td>
                    <td>@book.Genre</td>
                    <td>
                        <a href="/bookDB/@book.Isbn">Edit Book</a>
                        <button @onclick="()=>DeleteBook(book)">Delete Book</button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>
</div>

<div>
<h3>Users</h3>

<a href="/UserDB">Add New User</a>

<table>
    <thead>
        <tr>
            <th>Library Card Number</th>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Email</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @if (users != null)
        {
            foreach (var user in users)
            {
                <tr>
                    <td>@user.LibNum</td>
                    <td>@user.FName</td>
                    <td>@user.LName</td>
                    <td>@user.Email</td>
                    <td>
                        <a href="/userDB/@user.IdNum">Edit User</a>
                        <button @onclick="()=>DeleteUser(user)">Delete User</button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>
</div>

<div>
    <h3>Book Rentals</h3>

    <a href="/RentalDB">Borrow a Book</a>

    <table>
        <thead>
            <tr>
                <th>Library Card Number</th>
                <th>ISBN</th>
                <th>Date Borrowed</th>
                <th>Return Date</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @if (rentals != null)
            {
                foreach (var rental in rentals)
                {
                    <tr>
                        <td>@rental.LibNum</td>
                        <td>@rental.Isbn</td>
                        <td>@rental.BorrowDate</td>
                        <td>@rental.ReturnDate</td>
                        <td>
                            <a href="/userDB/@rental.RentNum">Edit User</a>
                            <button @onclick="()=>ReturnBook(rental)">Return Book</button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>


@code {
    private List<Book> books;
    private List<User> users;
    private List<Rental> rentals;
    private string BookErrorMessage;
    private string UserErrorMessage;
    private string RentalErrorMessage;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            books = await LibraryDatabase.GetBooksListAsync();
        }
        catch (Exception e)
        {
            BookErrorMessage = e.Message;
        }
        try
        {
            users = await LibraryDatabase.GetUsersListAsync();
        }
        catch (Exception e)
        {
            UserErrorMessage = e.Message;
        }
        try
        {
            rentals = await LibraryDatabase.GetRentalsListAsync();
        }
        catch (Exception e)
        {
            RentalErrorMessage = e.Message;
        }
    }

    private async Task DeleteBook(Book book)
    {
        try
        {
            await LibraryDatabase.DeleteBookAsync(book);
            books = await LibraryDatabase.GetBooksListAsync();
        }
        catch (Exception e)
        {
            BookErrorMessage = e.Message;
        }
    }

    private async Task DeleteUser(User user)
    {
        try
        {
            await LibraryDatabase.DeleteUserAsync(user);
            users = await LibraryDatabase.GetUsersListAsync();
        }
        catch (Exception e)
        {
            UserErrorMessage = e.Message;
        }
    }

    private async Task ReturnBook(Rental rental)
    {
        try
        {
            await LibraryDatabase.ReturnBookAsync(rental);
            rentals = await LibraryDatabase.GetRentalsListAsync();
        }
        catch (Exception e)
        {
            RentalErrorMessage = e.Message;
        }
    }
}