@page "/"
@inject Data.BookService BookDatabase
@inject Data.UserService UserDatabase
@using OOP2_FinalProject.Data

<h1>Library Management System</h1>

<h3>Books</h3>

@if(!string.IsNullOrEmpty(BookErrorMessage))
{
        <p>@BookErrorMessage</p>
}

<a href="/BookDB">Add New Book</a>

<table>
    <thead>
        <tr>
            <th>ISBN</th>
            <th>Title</th>
            <th>Author</th>
            <th>Genre</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @if (books != null)
        {
            foreach (var book in books)
            {
                <tr>
                    <td>@book.Isbn</td>
                    <td>@book.Title</td>
                    <td>@book.Author</td>
                    <td>@book.Genre</td>
                    <td>
                        <a href="/bookDB/@book.Isbn">Edit Book</a>
                        <button @onclick="()=>DeleteBook(book)">Delete Book</button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

<a href="/UserDB">Add New User</a>

<table>
    <thead>
        <tr>
            <th>Library Card Number</th>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Email</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @if (users != null)
        {
            foreach (var user in users)
            {
                <tr>
                    <td>@user.LibNum</td>
                    <td>@user.FName</td>
                    <td>@user.LName</td>
                    <td>@user.Email</td>
                    <td>
                        <a href="/userDB/@user.IdNum">Edit User</a>
                        <button @onclick="()=>DeleteUser(user)">Delete User</button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@code {
    private List<Book> books;
    private List<User> users;
    private string BookErrorMessage;
    private string UserErrorMessage;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            books = await BookDatabase.GetBooksListAsync();
        }
        catch (Exception e)
        {
            BookErrorMessage = e.Message;
        }
        try
        {
            users = await UserDatabase.GetUsersListAsync();
        }
        catch (Exception e)
        {
            UserErrorMessage = e.Message;
        }
    }

    private async Task DeleteBook(Book book)
    {
        try
        {
            await BookDatabase.DeleteBookAsync(book);
            books = await BookDatabase.GetBooksListAsync();
        }
        catch (Exception e)
        {
            BookErrorMessage = e.Message;
        }
    }

    private async Task DeleteUser(User user)
    {
        try
        {
            await UserDatabase.DeleteUserAsync(user);
            users = await UserDatabase.GetUsersListAsync();
        }
        catch (Exception e)
        {
            UserErrorMessage = e.Message;
        }
    }

}