@page "/bookDB/{id:int?}"
@using OOP2_FinalProject.Data
@inject NavigationManager navigation
@inject Data.LibraryService LibraryDatabase

<h1>Books</h1>

<h3>@(Id.HasValue? "Edit Item":"Add Item")</h3>

@if (!string.IsNullOrEmpty(BookErrorMessage))
{
    <div>@BookErrorMessage</div>
}

<EditForm Model="@book" OnValidSubmit="SaveBook">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <label for="Isbn">ISBN</label>
    <InputNumber id="Isbn" placeholder="9780545069670" TValue="long" @bind-Value="@book.Isbn" required></InputNumber>
    
    <br>

    <label for="Title">Title</label>
    <InputText id="Title" placeholder="Harry Potter and the Sorcerer's Stone" @bind-Value="@book.Title" required></InputText>
    
    <br>

    <label for="Author">Author</label>
    <InputText id="Author" placeholder="J.K. Rowling" @bind-Value="@book.Author" required></InputText>
    
    <br>

    <label for="Genre">Genre</label>
    <InputText id="Genre" placeholder="Fantasy" @bind-Value="@book.Genre" required></InputText>
    
    <br>

    <button type="submit">Submit</button>
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }
    private string BookErrorMessage;
    private Book book = new Book();

    private async Task SaveBook()
    {
        try
        {
            await LibraryDatabase.SaveBookAsync(book);
            navigation.NavigateTo("/Books");
        }
        catch (Exception e)
        {
            BookErrorMessage = e.Message;
        }
    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (Id.HasValue)
            {
                book = await LibraryDatabase.GetBookAsync(Id.Value);
            }
        }
        catch (Exception e)
        {
            BookErrorMessage = e.Message;
        }
    }
}
