@page "/rentalDB/{rentNum:int?}"
@using OOP2_FinalProject.Data
@inject NavigationManager navigation
@inject Data.LibraryService LibraryDatabase

<h1>Rentals</h1>

<h3>@(RentNum.HasValue ? "Edit Item" : "AddItem")</h3>

@if (!string.IsNullOrEmpty(RentalErrorMessage))
{
    <div>@RentalErrorMessage</div>
}

<EditForm Model="@rental" OnValidSubmit="@(() => SaveRental(SelectedUser, SelectedBook, BorrowDate))">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <label for="userSelect">Library Card Number</label>
    <select id="userSelect" @bind="@SelectedUser">
        <option value="" selected>Select User</option>
        @if (users != null)
        {
            @foreach (var user in users)
            {
                <option value="@user.LibNum">@user.LibNum</option>
            }
        }
    </select>

    <br>

    <label for="bookSelect">ISBN</label>
    <select for="bookSelect" @bind="@SelectedBook">
        <option value="" selected>Select Book</option>
        @if (books != null)
        {
            @foreach (var book in books)
            {
                <option value="@book.Isbn">@book.Isbn</option>
            }
        }
    </select>

    <br>

    <label for="BorrowDate">Borrow Date</label>
    <InputDate id="BorrowDate" TValue="DateTime" @bind-Value="@BorrowDate"></InputDate>

    <br>

    <button type="submit">Submit</button>
</EditForm>

@if (SelectedUser != 0)
{
    var selectedUser = GetSelectedUserDetails(SelectedUser);

    if (selectedUser != null)
    {
        <div>
            <h4>User Details</h4>
            <p>Name: @selectedUser.FName @selectedUser.LName</p>
            <p>Email: @selectedUser.Email</p>
        </div>
    }
}

@if (SelectedBook != 0)
{
    var selectedBook = GetSelectedBookDetails(SelectedBook);

    if (selectedBook != null)
    {
        <div>
            <h4>Book Details</h4>
            <p>Title: @selectedBook.Title</p>
            <p>Author: @selectedBook.Author</p>
            <p>Genre: @selectedBook.Genre</p>
        </div>
    }
}


@code {
    private int SelectedUser;
    private long SelectedBook;
    private DateTime BorrowDate { get; set; }
    private List<User> users;
    private List<Book> books;
    [Parameter]
    public int? RentNum { get; set; }
    private string RentalErrorMessage;
    private Rental rental = new Rental();

    private User GetSelectedUserDetails(int libNum)
    {
        return users.FirstOrDefault(u => u.LibNum == libNum);
    }

    private Book GetSelectedBookDetails(long isbn)
    {
        return books.FirstOrDefault(b => b.Isbn == isbn);
    }

    private async Task SaveRental(int SelectedUser, long SelectedBook, DateTime BorrowDate)
    {
        var rental = new Rental
        {
            LibNum = SelectedUser,
            Isbn = SelectedBook,
            BorrowDate = BorrowDate
        };

        try
        {
            await LibraryDatabase.SaveRentalAsync(rental);
            navigation.NavigateTo("/");
        }
        catch (Exception e)
        {
            RentalErrorMessage = e.Message;
        }
    }
    protected override async Task OnInitializedAsync()
    {
        users = await LibraryDatabase.GetUsersListAsync();
        books = await LibraryDatabase.GetBooksListAsync();

        try
        {
            if (RentNum.HasValue)
            {
                rental = await LibraryDatabase.GetRentalsAsync(RentNum.Value);
            }
        }
        catch (Exception e)
        {
            RentalErrorMessage = e.Message;
        }
    }
    protected override void OnInitialized()
    {
        BorrowDate = DateTime.Today;
    }
}
